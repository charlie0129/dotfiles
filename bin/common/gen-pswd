#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("-n",
                    "--number",
                    nargs="?",
                    type=int,
                    default=1,
                    help="number of passwords to generate (default 1)")
parser.add_argument("-s",
                    "--segments",
                    nargs="?",
                    type=int,
                    default=5,
                    help="number of segments in the password (default 5)")
parser.add_argument("-l",
                    "--segment-length",
                    nargs="?",
                    type=int,
                    default=5,
                    help="length of segments (default 5)")
parser.add_argument("-p",
                    "--separator",
                    nargs="?",
                    default="-",
                    help="segment separator (default '-')")
parser.add_argument("-a",
                    "--all-printable-characters",
                    dest="all_printable_char",
                    default=False,
                    action="store_true",
                    help="use all printable characters")
args = parser.parse_args()


def is_num_or_char(b):
    return ord('a') <= int(b) <= ord('z') \
        or ord('A') <= int(b) <= ord('Z') \
        or ord('0') <= int(b) <= ord('9')


def is_printable_char(b):
    return 33 <= int(b) <= 126 and \
        (args.segments == 1 or int(b) != ord(args.separator[0]))


def is_kept(b):
    if args.all_printable_char:
        return is_printable_char(b)
    else:
        return is_num_or_char(b)


for t in range(args.number):
    final_string = ''
    for i in range(args.segments):
        for j in range(args.segment_length):
            while True:
                b = os.urandom(1)[0]
                if is_kept(b):
                    final_string += chr(b)
                    break
        final_string += (args.separator if i != args.segments - 1 else '')
    print(final_string)
