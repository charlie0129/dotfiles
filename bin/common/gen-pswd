#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import argparse


def check_positive(value):
    ival = int(value)
    if ival <= 0:
        raise argparse.ArgumentTypeError(
            "%s is an invalid positive int value" % value)
    return ival


parser = argparse.ArgumentParser()
parser.description = "gen-pswd generates random strings, often used as a password generator. Each generated string consists of two parts: several segments and a separator, e.g. `MnlT8-GnidL'."
parser.add_argument("-n",
                    "--number",
                    nargs="?",
                    type=check_positive,
                    default=1,
                    help="number of passwords to generate (default 1)")
parser.add_argument("-s",
                    "--segments",
                    nargs="?",
                    type=check_positive,
                    default=2,
                    help="number of segments in the password (default 2)")
parser.add_argument("-l",
                    "--segment-length",
                    nargs="?",
                    type=check_positive,
                    default=5,
                    help="length of each segment (default 5)")
parser.add_argument("-L",
                    "--full-length",
                    nargs="?",
                    type=int,
                    default=0,
                    help="length of the entire generated string. If this option is set, the `--segments' option will be ignored. Enough number of segments will be generated and then the whole string will be truncated to satisfy this requirement.")
parser.add_argument("-p",
                    "--separator",
                    nargs="?",
                    default="-",
                    help="segment separator (default '-')")
parser.add_argument("-a",
                    "--all-printable-characters",
                    dest="all_printable_char",
                    default=False,
                    action="store_true",
                    help="use all printable characters (by default we only use upper and lower case letters, numbers, and hyphens)")
args = parser.parse_args()


def is_num_or_char(b):
    return ord('a') <= int(b) <= ord('z') \
        or ord('A') <= int(b) <= ord('Z') \
        or ord('0') <= int(b) <= ord('9')


def is_printable_char(b):
    return 33 <= int(b) <= 126 and \
        (args.segments == 1 or int(b) != ord(args.separator[0]))


def is_kept(b):
    if args.all_printable_char:
        return is_printable_char(b)
    else:
        return is_num_or_char(b)


def is_complexity_requirements_met(str):
    return any([c.islower() for c in str]) \
        and any([c.isupper() for c in str]) \
        and any([c.isdigit() for c in str])


if args.full_length > 0:
    args.segments = args.full_length // args.segment_length + 1
else:
    args.full_length = args.segments * args.segment_length + \
        (args.segments-1)*len(args.separator)

for t in range(args.number):
    while True:
        final_string = ''
        for i in range(args.segments):
            for j in range(args.segment_length):
                while True:
                    b = os.urandom(1)[0]
                    if is_kept(b):
                        final_string += chr(b)
                        break
            final_string += (args.separator if i != args.segments - 1 else '')
        if is_complexity_requirements_met(final_string):
            print(final_string[:args.full_length])
            break
